// 3) Assesment

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'dart:math';
import 'firebase_options.dart';              // <---------- Import firebase_options.dart file that was generated by `flutterfire configure`

void main() async {

  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(                         // <------ Initialize Firebase
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(PlantNurtureApp());
}

class PlantNurtureApp extends StatelessWidget {
  const PlantNurtureApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Virtual Plant',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.green,
        scaffoldBackgroundColor: Colors.green[50],
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.green[700],
          foregroundColor: Colors.white,
        ),

        cardTheme: CardThemeData(
          elevation: 4.0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15.0),
          ),
        ),

        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.green[600],
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            padding: EdgeInsets.symmetric(horizontal: 30, vertical: 15),
          ),
        ),
      ),
      home: PlantScreen(),
    );
  }
}

class PlantScreen extends StatefulWidget {
  const PlantScreen({super.key});

  @override
  State<PlantScreen> createState() => _PlantScreenState();
}

class _PlantScreenState extends State<PlantScreen> {       // <--------- Reference to the single document in Firestore

  final DocumentReference plantRef =
  FirebaseFirestore.instance.collection('plants').doc('mainPlant');


  Future<void> _nurturePlant(Map<String, dynamic> currentPlantData) async {             // <----------- Function to handle the "Nurture Plant" button press



    final int currentHealth = (currentPlantData['health'] ?? 0).toInt();      // <-------- Safely get current health, default to 0 if null



    final int newHealth = min(currentHealth + 10, 100);  // <---------- Calculate new health, capping at 100


    String newStage = 'seedling';         // <---------- Determine the new stage based on health thresholds
    if (newHealth >= 90) {
      newStage = 'mature';
    } else if (newHealth >= 50) {
      newStage = 'sapling';
    }


    await plantRef.update({          // <-------- Update the document in Firestore
      'health': newHealth,
      'stage': newStage,
      'lastNurturedBy': 'You ðŸŒ±',             // <-------  Hardcoded user name
      'lastNurturedAt': FieldValue.serverTimestamp(),
    });
  }


  String _getPlantImage(String stage) {             // <------------- Helper function to get the correct plant image based on its stage
    switch (stage) {
      case 'sapling':
        return 'assets/images/sapling.png';
      case 'mature':
        return 'assets/images/mature.png';
      case 'seedling':
      default:
        return 'assets/images/seedling.png';
    }
  }


  String _formatTimestamp(Timestamp? timestamp) {         // <---------- Helper function to format the Firestore Timestamp into a readable string
    if (timestamp == null) {
      return 'Never';
    }

    return DateFormat.yMMMd().add_jm().format(timestamp.toDate());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Virtual Plant'),
        centerTitle: true,
      ),

      body: StreamBuilder<DocumentSnapshot>(
        stream: plantRef.snapshots(),
        builder: (context, snapshot) {                 // <--------- Handle loading state

          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (snapshot.hasError) {                       // <--------- Handle error state
            return const Center(child: Text('Something went wrong!'));
          }

          if (!snapshot.hasData || !snapshot.data!.exists) {         // <-------------- Handle case where document doesn't exist
            return const Center(child: Text('Plant document not found!'));
          }




          // Now If data is available, cast it to a Map
          final plantData = snapshot.data!.data() as Map<String, dynamic>;
          final String stage = plantData['stage'] ?? 'seedling';
          final int health = (plantData['health'] ?? 0).toInt();
          final String lastNurturedBy = plantData['lastNurturedBy'] ?? 'N/A';
          final Timestamp? lastNurturedAt = plantData['lastNurturedAt'];

          return Center(
            child: SingleChildScrollView(
              padding: EdgeInsets.all(20.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Card(
                    child: Padding(
                      padding: EdgeInsets.all(24.0),
                      child: Column(
                        children: [
                          Text(
                            'Stage: ${stage[0].toUpperCase()}${stage.substring(1)}',
                            style: Theme.of(context).textTheme.headlineSmall,
                          ),

                          SizedBox(height: 20),

                          Image.asset(
                            _getPlantImage(stage),
                            height: 200,
                            fit: BoxFit.contain,
                          ),
                          SizedBox(height: 20),

                          Text(                                      // <-------------- Health Bar and Text
                            'Health: $health%',
                            style: Theme.of(context).textTheme.titleLarge,
                          ),

                          SizedBox(height: 8),

                          LinearProgressIndicator(
                            value: health / 100.0,
                            minHeight: 10,
                            borderRadius: BorderRadius.circular(5),
                            backgroundColor: Colors.grey[300],
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.lightGreen),
                          ),
                        ],
                      ),
                    ),
                  ),

                  SizedBox(height: 25),

                  ElevatedButton(
                    onPressed: () => _nurturePlant(plantData),
                    child: Text('Nurture Plant'),
                  ),

                  SizedBox(height: 25),
                  Card(
                    color: Colors.lightGreen[100],
                    child: ListTile(
                      leading: Icon(Icons.history, color: Colors.green),
                      title: Text('Last Nurtured By: $lastNurturedBy'),
                      subtitle: Text('At: ${_formatTimestamp(lastNurturedAt)}'),
                    ),
                  )
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}